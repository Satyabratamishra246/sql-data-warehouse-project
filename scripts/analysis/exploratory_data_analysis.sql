SELECT TOP 3 * FROM gold.dim_customers;
SELECT TOP 3 * FROM gold.dim_products;
SELECT TOP 3 * FROM gold.fact_sales;


-- First step in Data Analysis list down the Measures and Dimensions
--Measures: sales, quantity, age
-- Dimensions: category, product, birthdate, id

-- Exploring the database
SELECT * FROM INFORMATION_SCHEMA.TABLES;

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- Dimensions exploration
SELECT DISTINCT country FROM gold.dim_customers;

SELECT DISTINCT category FROM gold.dim_products;
SELECT DISTINCT category, subcategory FROM gold.dim_products;
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products;

-- Date exploration
-- Finding the first and last order date
-- how many years/months of sales data do we have?
SELECT
	MIN(order_date) first_order_date,
	MAX(order_date) last_order_date,
	DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales;

-- Find the youngest and oldest customer
SELECT
	DATEDIFF(YEAR, MIN(birth_date), GETDATE()) AS age_oldest,
	DATEDIFF(YEAR, MAX(birth_date), GETDATE()) AS age_youngest,
	DATEDIFF(YEAR, MIN(birth_date), MAX(birth_date)) AS age_difference
FROM gold.dim_customers;

-- Exploring measures

-- Find the total sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales;
-- find how many items are sold
SELECT SUM(quantity) AS total_items FROM gold.fact_sales;
-- finding average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales;
-- finding total number of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales;
SELECT COUNT(DISTINCT order_number) AS total_unique_orders FROM gold.fact_sales;
-- finding the total number of products
SELECT COUNT(product_key) AS total_products FROM gold.dim_products;
SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.dim_products;
-- finding the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;
-- finding the total number of customers that have placed an order
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales;


-- Generate a report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name,SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Items' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total No. Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total No. Products' AS measure_name, COUNT(product_name) AS measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total No. Customers' AS measure_name,COUNT(customer_key) AS measure_value FROM gold.dim_customers

-- Magnitute Analysis

-- find total customers by country
SELECT
	country,
	COUNT(customer_key) as total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;
-- find total customers by gender
SELECT
	gender,
	COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;
-- find total products by category
SELECT
	category,
	COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;
-- what is the average cost in each category?
SELECT
	category,
	AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;
-- what is the total revenue generated for each category?
SELECT
	gold.dim_products.category,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_products
ON gold.fact_sales.product_key = gold.dim_products.product_key
GROUP BY gold.dim_products.category
ORDER BY  total_revenue DESC;
-- find total revenue generated by each customer
SELECT
	gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_customers
ON gold.fact_sales.customer_key = gold.dim_customers.customer_key
GROUP BY gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name
ORDER BY total_revenue DESC;
-- what is the distribution of sold items across countries?
SELECT
	gold.dim_customers.country,
	SUM(gold.fact_sales.quantity) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_customers
ON gold.fact_sales.customer_key = gold.dim_customers.customer_key
GROUP BY gold.dim_customers.country
ORDER BY total_revenue DESC;

-- Ranking Analysis

-- which 5 products generate the highest revenue
SELECT TOP 5
	gold.dim_products.product_name,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_products
ON gold.fact_sales.product_key = gold.dim_products.product_key
GROUP BY gold.dim_products.product_name
ORDER BY  total_revenue DESC;

-- which are the top 5 worst performing products

SELECT TOP 5
	gold.dim_products.product_name,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_products
ON gold.fact_sales.product_key = gold.dim_products.product_key
GROUP BY gold.dim_products.product_name
ORDER BY  total_revenue;

-- Which are the top performing subcategories
SELECT TOP 5
	gold.dim_products.subcategory,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_products
ON gold.fact_sales.product_key = gold.dim_products.product_key
GROUP BY gold.dim_products.subcategory
ORDER BY  total_revenue DESC;

-- top 10 customers who have generated the highest revenue
SELECT TOP 10
	gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name,
	SUM(gold.fact_sales.sales_amount) AS total_revenue
FROM gold.fact_sales
LEFT JOIN gold.dim_customers
ON gold.fact_sales.customer_key = gold.dim_customers.customer_key
GROUP BY gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name
ORDER BY total_revenue DESC;

-- The 3 customer with the fewest orders placed

SELECT TOP 3
	gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name,
	COUNT(DISTINCT gold.fact_sales.order_number) AS total_orders
FROM gold.fact_sales
LEFT JOIN gold.dim_customers
ON gold.fact_sales.customer_key = gold.dim_customers.customer_key
GROUP BY gold.dim_customers.customer_key,
	gold.dim_customers.first_name,
	gold.dim_customers.last_name
ORDER BY total_orders;
